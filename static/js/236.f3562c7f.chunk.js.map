{"version":3,"file":"static/js/236.f3562c7f.chunk.js","mappings":"wRAuIA,EAlIqB,WACnB,MAAeA,EAAAA,EAAAA,UAARC,GAAP,eACMC,GAAWC,EAAAA,EAAAA,MACjB,GAA6BC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAtCC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,MAgCnB,OACE,UAAC,KAAD,kBAtBqB,CACrBC,SAAU,CACRC,KAAM,IAERC,WAAY,CACVD,KAAM,MAiBR,IAEET,KAAMA,EACNW,KAAK,WACLC,SAnCa,SAAAC,GACf,IAAQF,EAAmCE,EAAnCF,KAAMG,EAA6BD,EAA7BC,MAAOC,EAAsBF,EAAtBE,SAEjBA,IAFuCF,EAAZG,UAG7Bf,GAASgB,EAAAA,EAAAA,IAAS,CAAEN,KAAAA,EAAMG,MAAAA,EAAOC,SAAAA,MAChCT,IAAcC,GAASP,EAAKkB,cAEhC,EA6BGC,KAAM,UACNC,cAAe,CACbC,UAAW,CAAC,WAAY,WAAY,QACpCC,OAAQ,MAEVC,MAAO,CACLC,MAAO,KAETC,oBAAkB,EAbpB,WAeE,SAAC,SAAD,CACEd,KAAK,QACLe,MAAM,SACNC,MAAO,CACL,CACEC,KAAM,QACNC,QAAS,kCAEX,CACEC,UAAU,EACVD,QAAS,8BAVf,UAcE,SAAC,IAAD,OAGF,SAAC,SAAD,CACElB,KAAK,WACLe,MAAM,WACNC,MAAO,CACL,CACEG,UAAU,EACVD,QAAS,gCAGbE,aAAW,EATb,UAWE,SAAC,aAAD,OAGF,SAAC,SAAD,CACEpB,KAAK,UACLe,MAAM,mBACNM,aAAc,CAAC,YACfD,aAAW,EACXJ,MAAO,CACL,CACEG,UAAU,EACVD,QAAS,iCAEX,gBAAGI,EAAH,EAAGA,cAAH,MAAwB,CACtBC,UADsB,SACZC,EAAGC,GACX,OAAKA,GAASH,EAAc,cAAgBG,EAGrCC,QAAQC,OACb,IAAIC,MAAM,oDAHHF,QAAQG,SAKlB,EARH,GAVJ,UAsBE,SAAC,aAAD,OAGF,SAAC,SAAD,CACE7B,KAAK,OACLe,MAAM,OACNe,QAAQ,uCACRd,MAAO,CACL,CACEG,UAAU,EACVD,QAAS,0BACTa,YAAY,IARlB,UAYE,SAAC,IAAD,OAEF,SAAC,UAAD,kBAlGuB,CACzBhC,WAAY,CACViC,GAAI,CACFlC,KAAM,GACNmC,OAAQ,GAEVC,GAAI,CACFpC,KAAM,GACNmC,OAAQ,MA0FV,cACE,SAAC,KAAD,CAAQhB,KAAK,UAAUkB,SAAS,SAAhC,SAAyC,mBAMhD,ECjIc,SAASC,IACtB,OACE,SAAC,KAAD,WACE,4BACE,SAAC,KAAD,WACE,2BAAO,oBAET,SAAC,EAAD,QAIP,C","sources":["components/RegisterForm/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\n\nimport { register } from 'redux/auth/auth-operations';\nimport { Button, Form, Input } from 'antd';\n\nconst RegisterForm = () => {\n  const [form] = Form.useForm();\n  const dispatch = useDispatch();\n  const { isLoading, error } = useSelector(state => state.auth);\n\n  const onFinish = values => {\n    const { name, email, password, confirm } = values;\n\n    if (password === confirm) {\n      dispatch(register({ name, email, password }));\n      !isLoading && !error && form.resetFields();\n    }\n  };\n\n  const formItemLayout = {\n    labelCol: {\n      span: 24,\n    },\n    wrapperCol: {\n      span: 24,\n    },\n  };\n\n  const tailFormItemLayout = {\n    wrapperCol: {\n      xs: {\n        span: 24,\n        offset: 0,\n      },\n      sm: {\n        span: 16,\n        offset: 4,\n      },\n    },\n  };\n  return (\n    <Form\n      {...formItemLayout}\n      form={form}\n      name=\"register\"\n      onFinish={onFinish}\n      size={'default'}\n      initialValues={{\n        residence: ['zhejiang', 'hangzhou', 'xihu'],\n        prefix: '86',\n      }}\n      style={{\n        width: 300,\n      }}\n      scrollToFirstError\n    >\n      <Form.Item\n        name=\"email\"\n        label=\"E-mail\"\n        rules={[\n          {\n            type: 'email',\n            message: 'The input is not valid E-mail!',\n          },\n          {\n            required: true,\n            message: 'Please input your E-mail!',\n          },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n\n      <Form.Item\n        name=\"password\"\n        label=\"Password\"\n        rules={[\n          {\n            required: true,\n            message: 'Please input your password!',\n          },\n        ]}\n        hasFeedback\n      >\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item\n        name=\"confirm\"\n        label=\"Confirm Password\"\n        dependencies={['password']}\n        hasFeedback\n        rules={[\n          {\n            required: true,\n            message: 'Please confirm your password!',\n          },\n          ({ getFieldValue }) => ({\n            validator(_, value) {\n              if (!value || getFieldValue('password') === value) {\n                return Promise.resolve();\n              }\n              return Promise.reject(\n                new Error('The new password that you entered do not match!')\n              );\n            },\n          }),\n        ]}\n      >\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item\n        name=\"name\"\n        label=\"Name\"\n        tooltip=\"What do you want others to call you?\"\n        rules={[\n          {\n            required: true,\n            message: 'Please input your name!',\n            whitespace: true,\n          },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item {...tailFormItemLayout}>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Register\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default RegisterForm;\n","import { Helmet, HelmetProvider } from 'react-helmet-async';\n\nimport RegisterForm from '../components/RegisterForm/RegisterForm';\n\nexport default function Register() {\n  return (\n    <HelmetProvider>\n      <div>\n        <Helmet>\n          <title>Registration</title>\n        </Helmet>\n        <RegisterForm />\n      </div>\n    </HelmetProvider>\n  );\n}\n"],"names":["Form","form","dispatch","useDispatch","useSelector","state","auth","isLoading","error","labelCol","span","wrapperCol","name","onFinish","values","email","password","confirm","register","resetFields","size","initialValues","residence","prefix","style","width","scrollToFirstError","label","rules","type","message","required","hasFeedback","dependencies","getFieldValue","validator","_","value","Promise","reject","Error","resolve","tooltip","whitespace","xs","offset","sm","htmlType","Register"],"sourceRoot":""}